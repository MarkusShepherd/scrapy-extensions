[tool.poetry]
name = "scrapy-extensions"
version = "1.0.0"
description = "A collection of Scrapy extensions and other utilities"
authors = [
    "Markus Shepherd <markus@recommend.games>",
]
license = "MIT"
readme = "README.md"

documentation = "https://MarkusShepherd.github.io/scrapy-extensions"
homepage = "https://MarkusShepherd.github.io/scrapy-extensions"
repository = "https://github.com/MarkusShepherd/scrapy-extensions"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

packages = [
    { include = "scrapy_extensions", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.9.0, <4.0"

blurhash-numba = {version = "*", extras=["pillow"], optional = true}
itemadapter = "*"
jmespath = "*"
numpy = {version = "*", optional = true}
pillow = {version = ">=4.0.0", optional = true}
scrapy = ">=2.0.0, <3.0.0"
twisted = "*"
w3lib = ">=2.0.0, <3.0"

[tool.poetry.extras]
blurhash = ["blurhash-numba", "numpy", "pillow"]

[tool.poetry.group.dev.dependencies]
mkdocstrings = {version = ">=0.23", extras = ["python"]}
mkdocs-material = "*"
mypy = "*"
pre-commit = "*"
pymdown-extensions = "*"
pytest = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
python-kacl = "*"
ruff = ">=0.2.0"
types-jmespath = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py39" # The lowest supported version

[tool.ruff.lint]
# By default, enable all the lint rules.
# Add to the ignore list below if you don't want some rules.
# If you need some ignores for certain modules, see tool.ruff.lint.per-file-ignores below.
# For individual ignore cases, prefer inline `# noqa`s within the code.
select = ["ALL"]
ignore = [
    "ANN",      # Type hints related, let mypy handle these.
    "D",        # Docstrings related, way too strict to our taste
    "ERA001",   # Found commented-out code
    "RUF001",   # String contains ambiguous `â€“` (EN DASH)
    "TD",       # TODO
    "FIX",      # FIXME,
    "S101",     # "Use of `assert` detected"
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",     # "Use of `assert` detected"
    "ARG",      # "Unused function argument". Fixtures are often unused.
    "S105",     # "Possible hardcoded password".
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.pytest.ini_options]
addopts = """\
    --cov scrapy_extensions \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
# This is the global mypy configuration.
# Avoid changing this!
strict = true  # See all the enabled flags `mypy --help | grep -A 10 'Strict mode'`
disallow_any_unimported = false
disallow_subclassing_any = false

# If you need to ignore something for some specific module,
# add overrides for them. Avoid changing the global config!
# For example:
[[tool.mypy.overrides]]
module = [
    "blurhash_numba.*",
    "itemadapter.*",
    "scrapy.*",
]
ignore_missing_imports = true

# [[tool.mypy.overrides]]
# module = [
#   "tests/my_thing/test_my_thing",
# ]
# disallow_untyped_defs = false
